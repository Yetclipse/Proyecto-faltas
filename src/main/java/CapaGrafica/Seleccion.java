/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CapaGrafica;

import CapaExcepcion.BDexcepcion;
import CapaExcepcion.FaltasExcepcion;
import CapaLogica.Docente;
import CapaPersistencia.ConsultasFaltas;
import java.util.List;
import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *ANTES DE SEGUIR AVANZANDO
 * use Document ya que es el modelo de datos que guarda lo
 * que el usuario escribe
 * sirve para escuchar cambios en tiempo real (DocumentListener) 
 * esto para la barra de busqueda sin tener que hacer click en el boton de buscar 
 * aprevechando esto use .getDocument en vez de .getText
 * 
 * 
 * @author sebas
 */
public class Seleccion extends javax.swing.JFrame {
    private final ConsultasFaltas consultar = new ConsultasFaltas();
    private List<Docente> docentesBase = new java.util.ArrayList<>();
    private DefaultListModel<Docente> modeloLista = new DefaultListModel<>();
    /**
     * Creates new form registrarLicencia
     */
    public Seleccion(){
        initComponents();
        setLocationRelativeTo(null);
        try{
            postIniciar();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                    "Error iniciando la pantalla:\n" + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        txt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        textDocente = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        textDocente1 = new javax.swing.JLabel();
        textDocente2 = new javax.swing.JLabel();
        textDocente3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        textDocente4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Atras");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Continuar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        textDocente.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        textDocente.setText("Buscar");

        jButton3.setText("Seleccionar");

        textDocente1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        textDocente1.setText("Seleccione un docente");

        textDocente2.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        textDocente2.setText("para agregar/eliminar");

        textDocente3.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        textDocente3.setText("las licencias");

        jList.setModel(new javax.swing.AbstractListModel() {
            //Profe estuve 2 horas para hacer que esta lista funcionara
            //al final no pude porque como es codigo generado automaticamente
            //no pude cambiar el string a objeto como tal
            //que hice? Magia satanica para que funcionara
            //y poder agregar comentarios a esta parte del codigo no editable
            //duermo con codigos en la cabeza
            // y las tazas de cafe no fueron suficientes profe
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList);

        textDocente4.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        textDocente4.setText("Registrar docente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textDocente2)
                            .addComponent(textDocente1)
                            .addComponent(textDocente3)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textDocente)
                        .addGap(58, 58, 58)))
                .addGap(56, 56, 56))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(86, 86, 86)
                    .addComponent(textDocente4)
                    .addContainerGap(354, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textDocente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(textDocente1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textDocente2)
                .addGap(8, 8, 8)
                .addComponent(textDocente3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(114, 114, 114))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(379, Short.MAX_VALUE)
                    .addComponent(textDocente4)
                    .addGap(145, 145, 145)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();               
        Inicio Ventana = new Inicio();
        Ventana.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();               
        Registrar_Docente Re = new Registrar_Docente();
        Re.setVisible(true);
        setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Seleccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Seleccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Seleccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Seleccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Seleccion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JList jList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel textDocente;
    private javax.swing.JLabel textDocente1;
    private javax.swing.JLabel textDocente2;
    private javax.swing.JLabel textDocente3;
    private javax.swing.JLabel textDocente4;
    private javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables

    
    private void postIniciar() throws BDexcepcion, SQLException {
        setLocationRelativeTo(null);

        // asociar modelo
        jList.setModel(modeloLista);
        
        // cargar docentes de BD
        cargarDocentes();

        // activar buscador por texto
        prepararBusqueda();

        // Lo vi y lo queria probar profe
        // doble clic = seleccionar, Directo sin boton
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) seleccionarDocente();
            }
        });
        //En el caso de que el usuario lo seleccione y le de enter
        // InPut es para mapear las teclas con acciones de texto (no con codigo)
        // When Focused es que la tecla funcione solo cuando ese selecionado el texto
        // o sea *Enter* -> InputMap busca "select" -> ActionMap(Esta explicado abajo)
        jList.getInputMap(JComponent.WHEN_FOCUSED) 
                   .put(KeyStroke.getKeyStroke("ENTER"), "select");
        //Este actionMap es otro mapa que esta vez si relaciona con el codigo
        // -> ActionMap encuentra "select" -> corre el codigo
        jList.getActionMap().put("select", new AbstractAction() {
            @Override 
            public void actionPerformed(java.awt.event.ActionEvent e) {
                
                seleccionarDocente();
            }
        });
        //Basicamente le dice a la lista de la parte visual
        //que el usuario aprieta ENTER cuando esta enfocado y ahi llama seleccionarDocente()
        
        // botón Seleccionar, lo mismo pero desde el boton
        jButton3.addActionListener(e -> seleccionarDocente());
    
    }
    
    private void cargarDocentes() {
    modeloLista.clear();
    try {
        docentesBase = consultar.listarDocentes();
        for (Docente d : docentesBase) {
            modeloLista.addElement(d); //
        }
    } catch (FaltasExcepcion ex) {
        JOptionPane.showMessageDialog(this, "Error cargando docentes:\n" + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }   catch (BDexcepcion ex) {
            Logger.getLogger(Seleccion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Seleccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void prepararBusqueda() {
        //esta explicado arriba en los imports ;)
    txt.getDocument().addDocumentListener(new DocumentListener() {
        private void filtrar() {
            String q = txt.getText().trim().toLowerCase();
            modeloLista.clear();

            if (q.isEmpty()) {
                for (Docente d : docentesBase) modeloLista.addElement(d);
                return;
            }

            for (Docente d : docentesBase) {
                //Muestra el texto de búsqueda: nombre, apellido, cédula, materia y turno
                String GuardarDocente = (d.getNombre() + " " + d.getApellido() + " " +
                                   d.getCedula() + " " + d.getMateria() + " " + d.getTurno())
                                   .toLowerCase();
                if (GuardarDocente.contains(q)) {
                    modeloLista.addElement(d);
                }
            }
        }
        @Override public void insertUpdate(DocumentEvent e)  { filtrar(); }
        @Override public void removeUpdate(DocumentEvent e)  { filtrar(); }
        @Override public void changedUpdate(DocumentEvent e) { filtrar(); }
    });
    }
    
    private void seleccionarDocente() {
    Docente sel = (Docente) jList.getSelectedValue();
    if (sel == null) {
        JOptionPane.showMessageDialog(this, "Seleccione un docente de la lista.",
                "Atención", JOptionPane.WARNING_MESSAGE);
        return;
    }
    // abre la ventana de licencias del docente seleccionado
    String nombreCompleto = sel.getNombre() + " " + sel.getApellido();
    LicenciasPorDocente f = new LicenciasPorDocente(sel.getCedula(), nombreCompleto);
    f.setVisible(true);
    dispose();
    setVisible(false);
}

}
